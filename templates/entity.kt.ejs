import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class <%= table.camelName %> {
	@PrimaryGeneratedColumn()
	id: number;

<% table.columns.forEach((column) => { %>
	<% if (!column.type.startsWith('relation') 
			&& column.name != 'id'
		) { %>
	// <%= column.caption %>
	@Column(<%- column.directiveSettings %>)
	<%= column.lowerCamelName %>: <%= column.tsType %>;
	<% } %>
<% }); %>
}

/*
>>>>> Kotlin
*/

package <%= project.package %>.domain

import javax.persistence.*
import javax.validation.constraints.*

@Entity
@Table(name = "<%= table.name %>")
data class <%= table.camelName %>(

	<% if (table.hasId) { %>
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	val id: Long = 0,
	<% } %>

	@NotNull
	@Size(min = 1, max = 50)
	@Column(length = 50, unique = true, nullable = false)
	val login: String,

	@OneToMany(mappedBy = "user", cascade = [CascadeType.ALL])
	val history: MutableList<UserHistory> = mutableListOf()
)
