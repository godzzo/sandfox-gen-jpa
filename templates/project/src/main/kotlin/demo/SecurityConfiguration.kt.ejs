package <%= options.package %>

import <%= options.package %>.service.UserDetailsServiceImpl
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.http.HttpMethod
import org.springframework.security.authentication.AuthenticationManager
import org.springframework.security.authentication.AuthenticationProvider
import org.springframework.security.authentication.ProviderManager
import org.springframework.security.authentication.dao.DaoAuthenticationProvider
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity
import org.springframework.security.config.annotation.web.builders.HttpSecurity
import org.springframework.security.config.annotation.web.builders.WebSecurity
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity
import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer
import org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer
import org.springframework.security.core.userdetails.UserDetailsService
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder
import org.springframework.security.crypto.password.PasswordEncoder
import org.springframework.security.web.SecurityFilterChain
import kotlin.streams.toList


@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true)
class SecurityConfiguration {
    @Bean
    fun userDetailsService(): UserDetailsService {
        return UserDetailsServiceImpl()
    }

    @Bean
    fun authenticationProvider(): DaoAuthenticationProvider {
        val authProvider = DaoAuthenticationProvider()

        authProvider.setUserDetailsService(userDetailsService())
        authProvider.setPasswordEncoder(passwordEncoder())

        return authProvider
    }

	@Bean
	fun authenticationManager(
		authenticationConfiguration: AuthenticationConfiguration,
		authenticationProvider: AuthenticationProvider
	): AuthenticationManager {
		return ProviderManager(authenticationProvider)
	}

	@Bean
    fun filterChain(http: HttpSecurity): SecurityFilterChain {
/*FOXB-CFGSEC-INIT*/
/*FOXE-CFGSEC-INIT*/
        val authorizeRequests = http
            .csrf().disable()
            .authorizeRequests()
/*FOXB-CFGSEC-REQ*/
/*FOXE-CFGSEC-REQ*/

        val access = configAccess(authorizeRequests)

        access!!
/*FOXB-CFGSEC-ACC*/
/*FOXE-CFGSEC-ACC*/
            .anyRequest()
                <%if (options.hints.includes('permit-all')) {%>.permitAll()<%} else {%>.authenticated()<%}%>
            .and()
                .httpBasic()

		return http.build()
    }

    fun configAccess(configurer: ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry)
            : ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry? {
        var cfg = configurer
<%
tables.forEach((table, idx) => {
%>
        cfg = configApiAccess("<%= table.pluralLowerCamelName %>", cfg)
<%
});
%>
        return cfg;
    }

    fun configApiAccess(name: String, configurer: ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry)
            : ExpressionUrlAuthorizationConfigurer<HttpSecurity>.ExpressionInterceptUrlRegistry {
        val priv = "${name.toUpperCase()}_PRIVILEGE"

        return configurer
            .antMatchers(HttpMethod.GET, "/api/filter${name.capitalize()}")
                .access("hasAuthority('FILTER_${priv}')")
            .antMatchers(HttpMethod.POST, "/api/${name}/**")
                .access("hasAuthority('CREATE_${priv}')")
            .antMatchers(HttpMethod.GET, "/api/${name}/**")
                .access("hasAuthority('READ_${priv}')")
            .antMatchers(HttpMethod.PATCH, "/api/${name}/**")
                .access("hasAuthority('UPDATE_${priv}')")
            .antMatchers(HttpMethod.PUT, "/api/${name}/**")
                .access("hasAuthority('CREATE_${priv}') and hasAuthority('UPDATE_${priv}')")
            .antMatchers(HttpMethod.DELETE, "/api/${name}/**")
                .access("hasAuthority('DELETE_${priv}')")
    }

    fun hasRoles(roles: String): String {
        return roles.split(",").stream().map {"hasRole('$it')"}
            .toList().joinToString(" or ")
    }

    @Bean
    fun passwordEncoder(): PasswordEncoder {
        return BCryptPasswordEncoder()
    }

	@Bean
    fun configure(): WebSecurityCustomizer {
        return WebSecurityCustomizer {web: WebSecurity ->
			web.debug(false)
		}
    }
}
