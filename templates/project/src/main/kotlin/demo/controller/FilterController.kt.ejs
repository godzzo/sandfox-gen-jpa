package <%= options.package %>.controller

import <%= options.package %>.domain.<%= table.camelName %>
import <%= options.package %>.repository.<%= table.camelName %>Repository
import <%= options.package %>.projection.<%= table.camelName %>Projection
import <%= options.package %>.util.FilterHelper
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.data.domain.Pageable
import org.springframework.data.jpa.domain.Specification
import org.springframework.data.projection.ProjectionFactory
import org.springframework.data.rest.webmvc.RepositoryRestController
import org.springframework.data.web.PagedResourcesAssembler
import org.springframework.hateoas.EntityModel
import org.springframework.hateoas.PagedModel
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.CrossOrigin
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import org.springframework.web.bind.annotation.RequestParam
import javax.persistence.criteria.Predicate
/*FOXB-IMPORT*/
/*FOXE-IMPORT*/


@Controller
@RepositoryRestController
@CrossOrigin
class <%= table.camelName %>FilterController(
	@Autowired val repository: <%= table.camelName %>Repository,
/*FOXB-INIT*/
/*FOXE-INIT*/
	@Autowired val factory: ProjectionFactory
) {
    val log = LoggerFactory.getLogger(<%= table.camelName %>FilterController::class.java)

    init {
        log.info("<%= table.camelName %>FilterController INITIALIZED...");
    }

/*FOXB-BODY*/
/*FOXE-BODY*/
<% 
if ( options.hints.includes('envers') && table.audit ) { %>
	@RequestMapping(value = ["/{repository}/revision<%= table.pluralCamelName %>"], method = arrayOf(RequestMethod.GET))
	fun versions(id : Long, pageable: Pageable, assembler: PagedResourcesAssembler<<%= table.camelName %>Projection>) 
			: ResponseEntity<PagedModel<EntityModel<<%= table.camelName %>Projection>>> {

		val result = repository.findRevisions(id, pageable)

		val projected = result.map {
			factory.createProjection(<%= table.camelName %>Projection::class.java, it)
		}

		return ResponseEntity(assembler.toModel(projected), HttpStatus.OK);
	}
<% 
}
%>
    @RequestMapping(value = ["/{repository}/filter<%= table.pluralCamelName %>"], method = arrayOf(RequestMethod.GET))
    fun <%= table.pluralLowerCamelName %>Filter(filter : <%= table.camelName %>Filter,
         pageable: Pageable,
         assembler: PagedResourcesAssembler<<%= table.camelName %>Projection>) : ResponseEntity<PagedModel<EntityModel<<%= table.camelName %>Projection>>> {

        val specifications = createSpecifications(filter)
		val result = repository.findAll(specifications, pageable)
		
		val projected = result.map {
			factory.createProjection(<%= table.camelName %>Projection::class.java, it)
		}

        return ResponseEntity(assembler.toModel(projected), HttpStatus.OK);
    }

    fun createSpecifications(filter : <%= table.camelName %>Filter): Specification<<%= table.camelName %>>? = Specification.where(
        Specification { root, query, cb ->
            val predicates = mutableListOf<Predicate>()

            // predicates.add(cb.like(root.get<String>("lastName"), "${search}%"))
			// FilterHelper.like(root, query, cb, predicates, "firstName", search);
			
		<% 
		table.columns.forEach((column, idx) => { 
		%><% 
			if (column.ktType === 'String') { 
		%>
			FilterHelper.fullLike(root, query, cb, predicates, "<%= column.lowerCamelName%>", filter.<%= column.lowerCamelName%>_like);
			FilterHelper.fullLike(root, query, cb, predicates, "<%= column.lowerCamelName%>", filter.fullText_like);
			FilterHelper.equal(root, query, cb, predicates, "<%= column.lowerCamelName%>", filter.<%= column.lowerCamelName%>_equal);
		<%
			} 
		%><% 
			if (column.ktType === 'Int' && !column.type.startsWith('relation')) { 
		%>
			FilterHelper.equal(root, query, cb, predicates, "<%= column.lowerCamelName%>", filter.<%= column.lowerCamelName%>_equal);
		<%
			} 
		%><% 
			if (column.type.startsWith('relation.one')) { 
		%>
			FilterHelper.equal(root, query, cb, predicates, "<%= column.lowerCamelName.substring(0, column.lowerCamelName.length-2)%>", filter.<%= column.lowerCamelName%>_equal);
		<%
			} 
		%><% 
		}); 
		%>

/*FOXB-SPEC*/
/*FOXE-SPEC*/
		
			if (predicates.size < 1) {
				predicates.add(cb.isNotNull(root.get<String>("id")))
			}

			if (filter.isAnd) {
				cb.and(*predicates.toTypedArray())
			} else {
				cb.or(*predicates.toTypedArray())
			}
		}
	)
}

data class <%= table.camelName %>Filter(
<% 
table.columns.forEach((column, idx) => { 
%><% 
	if (column.ktType === 'String') { 
%>
	val <%= column.lowerCamelName %>_like: <%= column.ktType %>?,
	val <%= column.lowerCamelName %>_equal: <%= column.ktType %>?,
<%
	} 
%><% 
	if (column.ktType === 'Int') { 
%>
	val <%= column.lowerCamelName %>_equal: <%= column.ktType %>?,
<%
	} 
%><% 
}); 
%>
	val fullText_like: String?,

/*FOXB-MODEL_INIT*/
/*FOXE-MODEL_INIT*/

	val isAnd : Boolean = false
) {
/*FOXB-MODEL_BLOCK*/
/*FOXE-MODEL_BLOCK*/
}
