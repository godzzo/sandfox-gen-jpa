package <%= options.package %>.controller

import <%= options.package %>.domain.<%= table.camelName %>
import <%= options.package %>.repository.<%= table.camelName %>Repository
import <%= options.package %>.util.FilterHelper
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.data.domain.Pageable
import org.springframework.data.jpa.domain.Specification
import org.springframework.data.rest.webmvc.RepositoryRestController
import org.springframework.data.web.PagedResourcesAssembler
import org.springframework.hateoas.EntityModel
import org.springframework.hateoas.PagedModel
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import org.springframework.web.bind.annotation.RequestParam
import javax.persistence.criteria.Predicate


@Controller
@RepositoryRestController
class <%= table.camelName %>FilterController(
        @Autowired val repository: <%= table.camelName %>Repository
) {
    val log = LoggerFactory.getLogger(<%= table.camelName %>FilterController::class.java)

    init {
        log.info("<%= table.camelName %>FilterController INITIALIZED...");
    }

    @RequestMapping(value = ["/{repository}/filter<%= table.pluralCamelName %>"], method = arrayOf(RequestMethod.GET))
    fun <%= table.pluralLowerCamelName %>Filter(filter : <%= table.camelName %>Filter,
         pageable: Pageable,
         assembler: PagedResourcesAssembler<<%= table.camelName %>>) : ResponseEntity<PagedModel<EntityModel<<%= table.camelName %>>>> {

        val specifications = createSpecifications(filter)
        val result = repository.findAll(specifications, pageable);

        return ResponseEntity(assembler.toModel(result), HttpStatus.OK);
    }

    fun createSpecifications(filter : <%= table.camelName %>Filter): Specification<<%= table.camelName %>>? = Specification.where(
        Specification { root, query, cb ->
            val predicates = mutableListOf<Predicate>()

            // predicates.add(cb.like(root.get<String>("lastName"), "${search}%"))
			// FilterHelper.like(root, query, cb, predicates, "firstName", search);
			
		<% 
		table.columns.forEach((column, idx) => { 
		%><% 
			if (column.ktType === 'String') { 
		%>
			FilterHelper.like(root, query, cb, predicates, "<%= column.lowerCamelName%>", filter.<%= column.lowerCamelName%>_like);
			FilterHelper.like(root, query, cb, predicates, "<%= column.lowerCamelName%>", filter.fullText_like);
			FilterHelper.equal(root, query, cb, predicates, "<%= column.lowerCamelName%>", filter.<%= column.lowerCamelName%>_equal);
		<%
			} 
		%><% 
		}); 
		%>
			
			if (predicates.size < 1) {
				predicates.add(cb.isNotNull(root.get<String>("id")))
			}

			cb.or(*predicates.toTypedArray())
		}
	)
}

data class <%= table.camelName %>Filter(
<% 
table.columns.forEach((column, idx) => { 
%><% 
	if (column.ktType === 'String') { 
%>
	val <%= column.lowerCamelName %>_like: <%= column.ktType %>?,
	val <%= column.lowerCamelName %>_equal: <%= column.ktType %>?,
<%
	} 
%><% 
}); 
%>
	val fullText_like: String?
) {
}
