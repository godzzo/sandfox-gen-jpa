package <%= options.package %>.controller

import <%= options.package %>.repository.<%= table.camelName %>Repository
import <%= options.package %>.projection.<%= table.camelName %>Projection<% 
if ( options.hints.includes('envers') && table.audit ) { %>
import <%= options.package %>.projection.<%= table.camelName %>RevisionProjection<% 
} %>
import <%= options.package %>.service.<%= table.camelName %>Filter
import <%= options.package %>.service.<%= table.camelName %>FilterService
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.data.domain.Pageable
import org.springframework.data.projection.ProjectionFactory
import org.springframework.data.rest.webmvc.RepositoryRestController
import org.springframework.data.web.PagedResourcesAssembler
import org.springframework.hateoas.EntityModel
import org.springframework.hateoas.PagedModel
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.stereotype.Controller
import org.springframework.web.bind.annotation.CrossOrigin
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import javax.servlet.http.HttpSession
/*FOXB-IMPORT*/
/*FOXE-IMPORT*/


@Controller
@RepositoryRestController
@CrossOrigin
class <%= table.camelName %>FilterController(
/*FOXB-INIT*/
/*FOXE-INIT*/
	@Autowired val repository: <%= table.camelName %>Repository,
	@Autowired val filterService: <%= table.camelName %>FilterService,
	@Autowired val factory: ProjectionFactory
) {
	val log = LoggerFactory.getLogger(<%= table.camelName %>FilterController::class.java)

	init {
		log.info("<%= table.camelName %>FilterController INITIALIZED...")
	}

/*FOXB-BODY*/
/*FOXE-BODY*/
<% 
if ( options.hints.includes('envers') && table.audit ) { %>
	@RequestMapping(value = ["/{repository}/revision<%= table.pluralCamelName %>"], method = [RequestMethod.GET])
	fun versions(id : Long, pageable: Pageable, assembler: PagedResourcesAssembler<<%= table.camelName %>Revision>) 
			: ResponseEntity<PagedModel<EntityModel<<%= table.camelName %>Revision>>> {

		val result = repository.findRevisions(id, pageable)

		val projected = result.map {
			val revisionNumber = it.revisionNumber.get()
			val projection = factory.createProjection(<%= table.camelName %>RevisionProjection::class.java, it.entity)

			<%= table.camelName %>Revision(revisionNumber, projection)
		}

		return ResponseEntity(assembler.toModel(projected), HttpStatus.OK)
	}
<% 
}
%>
	@RequestMapping(value = ["/{repository}/filter<%= table.pluralCamelName %>"], method = [RequestMethod.GET])
	fun <%= table.pluralLowerCamelName %>Filter(filter: <%= table.camelName %>Filter,
		pageable: Pageable,
		assembler: PagedResourcesAssembler<<%= table.camelName %>Projection>,
		session: HttpSession
	) : ResponseEntity<PagedModel<EntityModel<<%= table.camelName %>Projection>>> {
		val result = filterService.invoke(filter, session, pageable)

		val projected = result.map {
			factory.createProjection(<%= table.camelName %>Projection::class.java, it)
		}

		return ResponseEntity(assembler.toModel(projected), HttpStatus.OK)
	}
}
<% 
if ( options.hints.includes('envers') && table.audit ) { 
%>
data class <%= table.camelName %>Revision(val revisionNumber: Int, val projection: <%= table.camelName %>RevisionProjection)
<% 
} 
%>
