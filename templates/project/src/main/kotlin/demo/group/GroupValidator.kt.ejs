package <%= options.package %>.group
<% subTypes.forEach(subType => { %>
import <%= options.package %>.domain.<%= subType %><%
});
%>
import org.springframework.stereotype.Component
import org.springframework.validation.Errors
import org.springframework.validation.Validator
import org.slf4j.LoggerFactory
import java.time.ZonedDateTime
/*FOXB-CARG-IMPORT*/
/*FOXE-CARG-IMPORT*/

@Component
class <%= group.camelName %>Create(
/*FOXB-CARG-CREATE*/
/*FOXE-CARG-CREATE*/
): Validator {
    private val log = LoggerFactory.getLogger(<%= group.camelName %>Create::class.java)

    init {
        log.info("<%= group.camelName %>Create - INIT")
    }

    override fun supports(clazz: Class<*>): Boolean {
        val support =  <%= group.camelName %>::class.java.isAssignableFrom(clazz)

        log.info("<%= group.camelName %>Create - Supports - ${support} - ${clazz}")

        return support
    }

    override fun validate(target: Any, errors: Errors) {
        val entity = target as <%= group.camelName %>
<%
subCols.forEach((el, pos) => {
%>
        if (target is <%= el.table.camelName %>) {
            (target as <%= el.table.camelName %>).<%= el.column.lowerCamelName %>.forEach {
                validate(it, errors)
            }
        }<%
});
%>
/*FOXB-CREATE*/
/*FOXE-CREATE*/
    }
}

@Component
class <%= group.camelName %>Save(
/*FOXB-CARG-SAVE*/
/*FOXE-CARG-SAVE*/
): Validator {
    private val log = LoggerFactory.getLogger(<%= group.camelName %>Save::class.java)

    init {
        log.info("<%= group.camelName %>Save - INIT")
    }

    override fun supports(clazz: Class<*>): Boolean {
        val support =  <%= group.camelName %>::class.java.isAssignableFrom(clazz)

        log.info("<%= group.camelName %>Save - Supports - ${support} - ${clazz}")

        return support
    }

    override fun validate(target: Any, errors: Errors) {
        val entity = target as <%= group.camelName %>
<%
subCols.forEach((el, pos) => {
%>
        if (target is <%= el.table.camelName %>) {
            (target as <%= el.table.camelName %>).<%= el.column.lowerCamelName %>.forEach {
                validate(it, errors)
            }
        }<%
});
%>
/*FOXB-SAVE*/
/*FOXE-SAVE*/
    }
}
