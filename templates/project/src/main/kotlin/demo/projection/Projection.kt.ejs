package <%= options.package %>.projection

import <%= options.package %>.domain.*<%
if ( options.hints.includes('postgis') ) { %>
import org.geolatte.geom.*<% } %>
import org.springframework.beans.factory.annotation.Value
import org.springframework.data.rest.core.config.Projection
import java.time.*
import javax.persistence.*
/*FOXB-IMPORT*/
/*FOXE-IMPORT*/

@Projection(name = "<%= table.camelName %>Projection", types = [<%= table.camelName %>::class])
interface <%= table.camelName %><%= extraNameTag %>Projection {
	@Value("#{target.<%= table.primary.lowerCamelName %>}")
	fun get<%= table.primary.camelName %>(): <%= table.primary.ktType %>

/*FOXB-BLOCK*/
/*FOXE-BLOCK*/
<%
// A nem relációs vagyis egyszerű tulajdonságok generálása
table.columns.forEach((column, idx) => {
	if (!column.type.startsWith('relation')
		&& !column.type.startsWith('primary')
		&& !column.writeOnly
	) {
%>
	// <%= column.caption %>
	fun get<%= column.camelName %>(): <%- column.ktType %><%= column.needed != 'yes'? '?': ''  %>
<%
	}
});
%>
<%
// Az egy (1:N) oldalu relációk getter -ként berakása
if (extraNameTag !== 'Base') {
	table.columns.forEach((column, idx) => {
		if (
			column.type.startsWith('relation.one')
			&& !(table.owner === column.relation.name && table.nested)
		) {
%>
	fun get<%= column.lowerCamelName.endsWith('Id')?
		column.camelName.substring(0, column.lowerCamelName.length-2):
		column.camelName %>(): <%= column.relation.camelName %>BaseProjection
<%
		}
	});
}
%><%
// Az egy (1:N) oldalu relációk getter -ként berakása
if (extraNameTag === 'Base') {
	table.columns.forEach((column, idx) => {
		if (
			column.type.startsWith('relation.one')
			&& table.hints.mtom && table.hints.mtom === column.relation.name
		) {
%>
	fun get<%= column.lowerCamelName.endsWith('Id')?
		column.camelName.substring(0, column.lowerCamelName.length-2):
		column.camelName %>(): <%= column.relation.camelName %>BaseProjection
<%
		}
	});
}
%>
<%
// Az egy (N:1) oldalu relációk getter -ként berakása
// Az alapnál a saját beágyazott alrekordok mennek le
if (extraNameTag === '') {
	table.columns.forEach((column, idx) => {
		if (
			column.type.startsWith('relation.many')
			&& (table.name === column.relation.owner && column.relation.nested)
		) {
%>
	fun get<%= column.camelName %>(): List<<%= column.relation.camelName %>BaseProjection>
<%
		}
	});
}
%><%
// Az egy (N:1) oldalu relációk getter -ként berakása
// Revision -nél az összes many relation
if (extraNameTag === 'Revision') {
	table.columns.forEach((column, idx) => {
		if (column.type.startsWith('relation.many')) {
%>
	fun get<%= column.camelName %>(): List<<%= column.relation.camelName %>BaseProjection>
<%
		}
	});
}
%>
}
