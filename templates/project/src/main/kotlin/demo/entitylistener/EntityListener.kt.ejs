package <%= options.package %>.entitylistener

import <%= options.package %>.domain.<%= table.camelName %>
import org.slf4j.LoggerFactory
import javax.persistence.*
import org.springframework.stereotype.Component
/*FOXB-IMPORT*/
/*FOXE-IMPORT*/

/*
 * You need to Inject with Lazy!
 * @Lazy @Autowired val someRepository: SomeRepository
 */
@Component
class <%= table.camelName %>EntityListener(
/*FOXB-CARG*/
/*FOXE-CARG*/
)<% if (options.hints.includes('hibernate-interceptor')) { %>: EntityListener<% } %> {
    private val log = LoggerFactory.getLogger(<%= table.camelName %>EntityListener::class.java)<%
if (options.hints.includes('hibernate-interceptor')) { %>
    override fun assignable(entity: Any): Boolean = (entity is <%= table.camelName %>)

    override fun onFlushDirty(
        entity: Any,
        id: Any,
        current: MutableMap<String, Any?>,
        previous: MutableMap<String, Any?>
    ): String? {
        val <%= table.lowerCamelName %> = entity as <%= table.camelName %>
        var message : String? = null

/*FOXB-FLUSH*/
/*FOXE-FLUSH*/

        return message
    }<%
} %>
    fun preSave(type: String, entity: <%= table.camelName %>) {
/*FOXB-PRE*/
/*FOXE-PRE*/
    }

    fun postSave(type: String, entity: <%= table.camelName %>) {
/*FOXB-POST*/
/*FOXE-POST*/
    }

    @PrePersist
    fun prePersist(entity: <%= table.camelName %>) {
        preSave("insert", entity);
    }
    @PreUpdate
    fun preUpdate(entity: <%= table.camelName %>) {
        preSave("update", entity);
    }
    @PreRemove
    fun preRemove(entity: <%= table.camelName %>) {
        preSave("delete", entity);
    }

    @PostPersist
    fun postPersist(entity: <%= table.camelName %>) {
        postSave("insert", entity);
    }
    @PostUpdate
    fun postUpdate(entity: <%= table.camelName %>) {
        postSave("update", entity);
    }
    @PostRemove
    fun postRemove(entity: <%= table.camelName %>) {
        postSave("delete", entity);
    }
}
