package <%= package %>.util

import java.time.ZonedDateTime
import javax.persistence.criteria.CriteriaBuilder
import javax.persistence.criteria.CriteriaBuilder.In
import javax.persistence.criteria.CriteriaQuery
import javax.persistence.criteria.Predicate
import javax.persistence.criteria.Root
/*FOXB-IMPORT*/
/*FOXE-IMPORT*/

object FilterHelper {
/*FOXB-BLOCK*/
/*FOXE-BLOCK*/

        fun between(root: Root<*>, q: CriteriaQuery<*>, cb: CriteriaBuilder,
            predicates: MutableList<Predicate>, name: String?,
            fromValue: ZonedDateTime?, toValue: ZonedDateTime?) {
        if (fromValue != null && toValue != null) {
            val startingFrom =  cb.greaterThanOrEqualTo(root.get(name), fromValue)
            val endingAt = cb.lessThanOrEqualTo(root.get(name), toValue)

            predicates.add(cb.and(startingFrom, endingAt))
        } else if (fromValue != null) {
            predicates.add(cb.greaterThanOrEqualTo(root.get(name), fromValue))
        } else if (toValue != null) {
            predicates.add(cb.lessThanOrEqualTo(root.get(name), toValue))
        }
    }

    fun inList(root: Root<*>, q: CriteriaQuery<*>, cb: CriteriaBuilder,
                   predicates: MutableList<Predicate>, name: String?, value: String?, isNot: Boolean = false, type: String = "String") {
        val inClause: In<Any> = cb.`in`(root.get(name))

        if (value != null) {
            val values = value.split(',')

            for (item in values) {
                if (type.equals("String")) {
                    inClause.value(item)
                } else {
                    inClause.value(item.toInt())
                }
            }

            predicates.add(if (isNot) inClause.not() else inClause)
        }
    }

    fun <X, Y> subQueryInList(root: Root<*>,
        query: CriteriaQuery<*>, cb: CriteriaBuilder,
        entityType: Class<X>, subEntityType: Class<Y>, joinProp: String,
        prs: MutableList<Predicate>, name: String?, value: String?,
        isNot: Boolean = false, type: String = "String"
    ) {
        if (value != null) {
            val sq = query.subquery(entityType)
            val project = sq.from(subEntityType)
            val sqEmp = project.join<X, Y>(joinProp)

            val predicates = mutableListOf<Predicate>()

            inList(project, query, cb, predicates, name, value, isNot, type)

            sq.select(sqEmp.get("id")).where(cb.and(*predicates.toTypedArray()))

            val inClause: In<X> = cb.`in`(root) as In<X>

            prs.add(inClause.value(sq))
        }
    }

    fun greaterThan(root: Root<*>, q: CriteriaQuery<*>, cb: CriteriaBuilder,
             predicates: MutableList<Predicate>, name: String?, value: Int?) {
        if (value != null) {
            predicates.add(cb.greaterThan(root.get(name), value))
        }
    }

    fun lessThan(root: Root<*>, q: CriteriaQuery<*>, cb: CriteriaBuilder,
            predicates: MutableList<Predicate>, name: String?, value: Int?) {
        if (value != null) {
            predicates.add(cb.lessThan(root.get(name), value))
        }
    }

    fun like(root: Root<*>, q: CriteriaQuery<*>, cb: CriteriaBuilder,
             predicates: MutableList<Predicate>, name: String?, value: String?) {
        if (value != null) {
            predicates.add(cb.like(root.get(name), "${value}%"))
        }
    }

    fun fullLike(root: Root<*>, q: CriteriaQuery<*>, cb: CriteriaBuilder,
            predicates: MutableList<Predicate>, name: String?, value: String?) {
        if (value != null) {
            predicates.add(cb.like(root.get(name), "%${value}%"))
        }
    }

    fun equal(root: Root<*>, q: CriteriaQuery<*>, cb: CriteriaBuilder,
            predicates: MutableList<Predicate>, name: String?, value: String?) {
        if (value != null) {
            predicates.add(cb.equal(root.get<String>(name), value))
        }
    }

	fun equal(root: Root<*>, q: CriteriaQuery<*>, cb: CriteriaBuilder,
			  predicates: MutableList<Predicate>, name: String?, value: Boolean?) {
		if (value != null) {
			predicates.add(cb.equal(root.get<String>(name), value))
		}
	}

    fun equal(root: Root<*>, q: CriteriaQuery<*>, cb: CriteriaBuilder,
            predicates: MutableList<Predicate>, name: String?, value: Int?) {
        if (value != null) {
            predicates.add(cb.equal(root.get<String>(name), value))
        }
    }

    fun equal(root: Root<*>, q: CriteriaQuery<*>, cb: CriteriaBuilder,
            predicates: MutableList<Predicate>, name: String?, value: Long?) {
        if (value != null) {
            predicates.add(cb.equal(root.get<String>(name), value))
        }
    }
}
