package <%= options.package %>

import <%= options.package %>.domain.*
import <%= options.package %>.projection.*
import <%= options.package %>.group.*
import org.slf4j.LoggerFactory
import org.springframework.data.rest.core.config.RepositoryRestConfiguration
import org.springframework.data.rest.webmvc.config.RepositoryRestConfigurer
import org.springframework.stereotype.Component
import org.springframework.data.rest.core.event.ValidatingRepositoryEventListener
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.validation.Validator
import org.springframework.web.servlet.config.annotation.CorsRegistry

@Component
class RepositoryRestCustomization(
    @Autowired val validator: Validator<%
for (const groupName in groups) {
    const group = groups[groupName];

    echo(`,\n    @Autowired val ${group.lowerCamelName}Create: ${group.camelName}Create,\n`);
    echo(`    @Autowired val ${group.lowerCamelName}Save: ${group.camelName}Save`);
}
%>) : RepositoryRestConfigurer {
    private val log = LoggerFactory.getLogger(RepositoryRestCustomization::class.java)

    init {
        log.info("configureRepositoryRestConfiguration: INIT")
    }

    override fun configureRepositoryRestConfiguration(config: RepositoryRestConfiguration?, cors: CorsRegistry) {
        log.info("configureRepositoryRestConfiguration: CALLED")

        config?.projectionConfiguration
            ?.addProjection(IdProjection::class.java)<%
tables.forEach((table, idx) => {
%>
            ?.addProjection(<%= table.camelName %>Projection::class.java)
            ?.addProjection(<%= table.camelName %>BaseProjection::class.java)<%
});%>
/*FOXB-PROJ*/
/*FOXE-PROJ*/

        config?.exposeIdsFor(<%
tables.forEach((table, idx) => {
%>
            <%= table.camelName %>::class.java<%if (idx<tables.length-1) {%>,<%}%><%
});%>
        )
    }

    override fun configureValidatingRepositoryEventListener(
            validatingListener: ValidatingRepositoryEventListener
    ) {
        validatingListener.addValidator("beforeCreate", validator)
        validatingListener.addValidator("beforeSave", validator)
<%
for (const groupName in groups) {
    const group = groups[groupName];
%>
        validatingListener.addValidator("beforeCreate", <%= group.lowerCamelName %>Create)
        validatingListener.addValidator("beforeSave", <%= group.lowerCamelName %>Save)
<%
}
%>
    }
}
