package <%= options.package %>.domain

import javax.persistence.*
import javax.validation.constraints.*

@Entity
@Table(name = "<%= table.name %>")
data class <%= table.camelName %>(
<% table.columns.forEach((column, idx) => { %><% if (!column.type.startsWith('relation') && column.name != 'id') { %>
	// <%= column.caption %>
	<%- column.annotations %>
	val <%= column.lowerCamelName %>: <%= column.ktType %>,
<% } %><% }); %>
<% table.columns.forEach((column, idx) => { %><% if (column.type.startsWith('relation.many')) { %>
	OneToMany
	@OneToMany(mappedBy = "<%= table.lowerCamelName %>", cascade = [CascadeType.ALL])
	val <%= column.lowerCamelName %>: MutableList<<%= column.relation.camelName %>> = mutableListOf(),
<% } %><% }); %>
<% table.columns.forEach((column, idx) => { %><% if (column.type.startsWith('relation.one')) { %>
	@ManyToOne
	@JoinColumn(name = "<%= column.relation.name %>_id")
	val <%= column.relation.lowerCamelName %>: <%= column.relation.camelName %>,
<% } %><% }); %>
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	val id: Long = 0
)
