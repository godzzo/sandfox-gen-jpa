package <%= options.package %>.domain

import java.io.Serializable
import java.time.*
import javax.persistence.*
import javax.validation.constraints.*
/*FOXB-IMPORT*/
/*FOXE-IMPORT*/

@Entity
@Table(name = "<%= table.name %>")
<%if (table.primaries.length > 1) {
	%>@IdClass(<%= table.camelName %>Id::class)<%
}%>
data class <%= table.camelName %>(
/*FOXB-CARGB*/
/*FOXE-CARGB*/
<% 
table.columns.forEach((column, idx) => { 
%><% 
	if (!column.type.startsWith('relation') 
		&& !column.type.startsWith('primary')
		) { 
%>
	// <%= column.caption %>
	<%- column.annotations %>
	var <%= column.lowerCamelName %>: <%= column.ktType %><%= column.needed != 'yes'? '?': ''  %>,
<%	} 
%><% 
}); 
%>
<% 
table.columns.forEach((column, idx) => { 
%><% 
	if (column.type.startsWith('relation.one')) { 
%>
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "<%= column.name + (column.name.endsWith('_id')? '': '_id') %>")
	val <%= column.lowerCamelName.endsWith('Id')? 
		column.lowerCamelName.substring(0, column.lowerCamelName.length-2): 
		column.lowerCamelName %>: <%= column.relation.camelName %>,
<%
	} 
%><% 
}); 
%>

<%if (table.primaries.length < 2) { %>
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "<%= table.primary.name %>")
	val id: Long = 0
<%} else {%><% 
table.primaries.forEach((column, idx) => { 
%>
	@Id
	@ManyToOne
	@JoinColumn(name = "<%= column.name + (column.name.endsWith('_id')? '': '_id') %>")
	val <%= column.lowerCamelName.endsWith('Id')? 
		column.lowerCamelName.substring(0, column.lowerCamelName.length-2): 
		column.lowerCamelName %>: <%= column.relation.camelName %><%if (idx<table.primaries.length-1) {%>,<%}%>
<%
});
%>
<%}%>
/*FOXB-CARGE*/
/*FOXE-CARGE*/
): Serializable {
/*FOXB-BLOCKB*/
/*FOXE-BLOCKB*/
<% 
table.columns.forEach((column, idx) => { 
%><% 
	if (column.type.startsWith('relation.many')) { 
%>
	@OneToMany(mappedBy = "<%= table.lowerCamelName %>", cascade = [CascadeType.ALL], fetch = FetchType.LAZY)
	val <%= column.lowerCamelName %>: MutableList<<%= column.relation.camelName %>> = mutableListOf()
<% 
	} 
%><% 
}); 
%>
/*FOXB-BLOCKE*/
/*FOXE-BLOCKE*/
}

<%
if (table.primaries.length > 1) {
%>
// https://stackoverflow.com/questions/23837561/jpa-2-0-many-to-many-with-extra-column
data class <%= table.camelName %>Id (
<% 
table.primaries.forEach((column, idx) => { 
%>	<%if (idx>0) {%>,<%}%>
	val <%= column.lowerCamelName.endsWith('Id')? 
		column.lowerCamelName.substring(0, column.lowerCamelName.length-2): 
		column.lowerCamelName %>: Long = 0
<%
});
%>
): Serializable
<% 
} 
%>
