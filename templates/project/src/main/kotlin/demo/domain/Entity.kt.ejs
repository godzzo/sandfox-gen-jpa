package <%= options.package %>.domain

import java.io.Serializable
import java.time.*
import javax.persistence.*
import javax.validation.constraints.*<%
if ( options.hints.includes('postgis') ) { %>
import org.geolatte.geom.*<% } %><%
if ( options.hints.includes('envers') && table.audit ) { %>
import org.hibernate.envers.*<% } %>
import org.hibernate.annotations.ColumnDefault
import org.hibernate.annotations.Comment
import org.hibernate.annotations.Table as HibernateTable
import com.fasterxml.jackson.annotation.*
import <%= options.package %>.group.*
import <%= options.package %>.entitylistener.<%= table.camelName %>EntityListener<%
if ( Object.keys(enums).length > 0 ) { %>
import <%= options.package %>.enum.*<% } %><%-
columnAnnotations.allImports %>
/*FOXB-IMPORT*/
/*FOXE-IMPORT*/

@Entity<%
if ( options.hints.includes('envers') && table.audit ) {%>
@Audited<%}%>
@EntityListeners(<%= table.camelName %>EntityListener::class)
@Table(name = "<%= table.tableName %>")
@HibernateTable(comment = "<%= table.caption %>", appliesTo = "<%= table.tableName %>")<%
if (table.primaries.length > 1) { %>
@IdClass(<%= table.camelName %>Id::class)<%
} %>
class <%= table.camelName %>(
/*FOXB-CARGB*/
/*FOXE-CARGB*/

/*FOXB-CARGE*/
/*FOXE-CARGE*/
): <%
if (table.groupConfigs.length > 0) {
	table.groupConfigs.forEach((group, idx) => {
%><%= idx === 0? group.camelName: ', ' + group.camelName%><%
	});%>, <%
}
%>Serializable
/*FOXB-IFACE*/
/*FOXE-IFACE*/
{
/*FOXB-BLOCKB*/
/*FOXE-BLOCKB*/
<%
table.columns.forEach((column, idx) => {
%><%
	if (!column.type.startsWith('relation')
		&& !column.type.startsWith('primary')
		) { // NORMAL Columns
%>
	@Comment("<%= column.caption %>")
	<%- column.annotations %><%if (typeof(column.defaultValue) !== 'undefined' ) { %>
	@ColumnDefault("<%- column.defaultValue %>")<% } %><%
	if (column.type.startsWith('enum.')) {
	%>
	@Enumerated(EnumType.<%= column.type.startsWith('enum.ord') ? 'ORDINAL': 'STRING' %>)<% } %>
	<%= (column.group || column.options.includes('override')? 'override ' : '') %>var <%= column.lowerCamelName %>: <%- column.ktType %>? = null
<%	}
%><%
});
%>
<%if (table.primaries.length < 2) { %>
	@Id<%
	if (!table.primary.options.includes('no-auto')) {
%>
	@GeneratedValue(strategy = GenerationType.IDENTITY)<%
	}
%>
	@Column(name = "<%= table.primary.name %>")
	var <%= table.primary.lowerCamelName %>: <%= table.primary.ktType %> = <%- table.primary.ktValue %>
<%} else {%><%
table.primaries.forEach((column, idx) => {
%>
	@Comment("<%= column.caption %>")
	@Id
	@ManyToOne
	@JoinColumn(name = "<%= column.name + (column.name.endsWith('_id')? '': '_id') %>")
	val <%= column.lowerCamelName.endsWith('Id')?
		column.lowerCamelName.substring(0, column.lowerCamelName.length-2):
		column.lowerCamelName %>: <%= column.relation.camelName %><%if (idx<table.primaries.length-1) {%>,<%}%>
<%
});
%>
<%}%>

<%
table.columns.forEach((column, idx) => {
%><%
	const isOwnerColumn = column.name.startsWith(table.owner) && column.relation.name === table.owner

	if (column.type.startsWith('relation.one')) {
		const columnNameWithId = column.name + (column.name.endsWith('_id')? '': '_id');
		const nullable = column.needed != 'yes';

		const columnNameWithoutId = column.name.endsWith('_id')? column.name.substring(0, column.name.length-3): column.name;
		const foreignKeyName = `fk_${table.name}_${columnNameWithoutId}`;

		const overrideTag = column.group || column.options.includes('override')? 'override ' : '';

%>
	@Comment("<%= column.caption %>")
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "<%= columnNameWithId %>", nullable=<%= nullable  %>,
		foreignKey = ForeignKey(name = "<%= foreignKeyName %>")
	)<%
		if ( options.hints.includes('envers') && table.audit && !column.relation.audit) { %>
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)<%
		} %><%
		if ((isOwnerColumn || column.relation.name === table.name) && table.nested) {
	%>
	@JsonBackReference<%
		}
	%>
	<%= overrideTag %>var <%= column.relName %>: <%= column.relation.camelName %>? = null
<%

	}
%><%
});
%><%
table.columns.forEach((column, idx) => {
	if (column.type.startsWith('relation.many')) {
		if (table.name === column.relation.owner) {
%>
	@OneToMany(mappedBy = "<%= table.lowerCamelName %>", cascade = [CascadeType.ALL], fetch = FetchType.LAZY)<%
			if (column.relation.nested) {
%>
	@JsonManagedReference<%
			}
%>
	var <%= column.lowerCamelName %>: MutableList<<%= column.relation.camelName %>> = mutableListOf()
<%
		}
	}
});
%>
/*FOXB-BLOCKE*/
/*FOXE-BLOCKE*/
}
<%
if (table.primaries.length > 1) {
%>
// https://stackoverflow.com/questions/23837561/jpa-2-0-many-to-many-with-extra-column
data class <%= table.camelName %>Id (
<%
table.primaries.forEach((column, idx) => {
	const propName = column.lowerCamelName.endsWith('Id')?
		column.lowerCamelName.substring(0, column.lowerCamelName.length-2):
		column.lowerCamelName;

%>	<%if (idx>0) {%>,<%}%>
	val <%= propName %>: Long = 0
<%
});
%>
): Serializable
<%
}
%>
