package <%= options.package %>.eventhandler

import <%= options.package %>.domain.<%= table.camelName %><%
if (options.hints.includes('websocket')) { %>
import <%= options.package %>.service.EntityMessageService<%
} %>
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.data.rest.core.annotation.*
import org.springframework.stereotype.Component
import org.slf4j.LoggerFactory
/*FOXB-IMPORT*/
/*FOXE-IMPORT*/

@Component
@RepositoryEventHandler(<%= table.camelName %>::class)
class <%= table.camelName %>EventHandler(
/*FOXB-CARG*/
/*FOXE-CARG*/<%
if (options.hints.includes('websocket')) { %>
    @Autowired val messageService : EntityMessageService<%
} %>
) {
    private val log = LoggerFactory.getLogger(<%= table.camelName %>EventHandler::class.java)

/*FOXB-CODE*/
/*FOXE-CODE*/

    fun before(type: String, entity: <%= table.camelName %>) {<%
table.columns.forEach((column, idx) => {
	if (column.type.startsWith('relation.many')) {
		if (table.name === column.relation.owner && column.relation.nested) {
%>
		entity.<%= column.lowerCamelName %>.forEach {
			it.<%= table.lowerCamelName %> = entity
		}
<%
		}
	}
});
%>
/*FOXB-BEFORE*/
/*FOXE-BEFORE*/
    }

    fun after(type: String, entity: <%= table.camelName %>) {
/*FOXB-AFTER*/
/*FOXE-AFTER*/<%
if (options.hints.includes('websocket')) { %>
        messageService.send("<%= table.lowerCamelName %>", type, entity.id, entity)<%
} %>
    }

    @HandleBeforeCreate
    fun beforeCreate(entity: <%= table.camelName %>) {
        before("insert", entity)

    }
    @HandleBeforeDelete
    fun beforeDelete(entity: <%= table.camelName %>) {
        before("delete", entity)
    }
    @HandleBeforeSave
    fun beforeSave(entity: <%= table.camelName %>) {
        before("update", entity)
    }

    @HandleAfterCreate
    fun afterCreate(entity: <%= table.camelName %>) {
        after("insert", entity)

    }
    @HandleAfterDelete
    fun afterDelete(entity: <%= table.camelName %>) {
        after("delete", entity)
    }
    @HandleAfterSave
    fun afterSave(entity: <%= table.camelName %>) {
        after("update", entity)
    }
}
