package <%= options.package %>.service.filter

import <%= options.package %>.domain.*
import <%= options.package %>.repository.<%= table.camelName %>Repository
import <%= options.package %>.util.FilterHelper
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
import org.springframework.data.jpa.domain.Specification
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import jakarta.persistence.criteria.Predicate
import jakarta.servlet.http.HttpSession
/*FOXB-IMPORT*/
/*FOXE-IMPORT*/


@Service
class <%= table.camelName %>FilterService(
/*FOXB-INIT*/
/*FOXE-INIT*/
	@Autowired val repository: <%= table.camelName %>Repository
) {
	val log = LoggerFactory.getLogger(<%= table.camelName %>FilterService::class.java)

	init {
		log.info("<%= table.camelName %>FilterService INITIALIZED...")
	}

/*FOXB-BODY*/
/*FOXE-BODY*/
	@Transactional(readOnly = true)
	fun invoke(filter: <%= table.camelName %>Filter, session: HttpSession, pageable: Pageable): Page<<%= table.camelName %>> {
		val specifications = createSpecifications(filter, session)

		return repository.findAll(specifications, pageable)
	}

	fun createSpecifications(filter: <%= table.camelName %>Filter, session: HttpSession): Specification<<%= table.camelName %>>? = Specification.where(
		Specification { root, query, cb ->
			val predicates = mutableListOf<Predicate>()
			val fullText = mutableListOf<Predicate>()

			// predicates.add(cb.like(root.get<String>("lastName"), "${search}%"))
			// FilterHelper.like(root, query, cb, predicates, "firstName", search)

			FilterHelper.inList(root, query, cb, predicates, "id", filter.id_list, false, "Int")
		<%
		table.columns.forEach((column, idx) => {
			const filterOpts = ((column.options ?? []).find(e => e.startsWith("filter")) ?? "filter:").substring(7).split(";");
		%><%
			if (filterOpts.includes('null')) {
		%>
            FilterHelper.isNull(root, query, cb, predicates, "<%= column.lowerCamelName%>", filter.<%= column.lowerCamelName%>_isNull)
            FilterHelper.isNotNull(root, query, cb, predicates, "<%= column.lowerCamelName%>", filter.<%= column.lowerCamelName%>_isNotNull)
		<%
			}
		%><%
			if (column.ktType === 'String') {
		%>
			FilterHelper.fullLike(root, query, cb, predicates, "<%= column.lowerCamelName%>", filter.<%= column.lowerCamelName%>_like)
			FilterHelper.fullLike(root, query, cb, fullText, "<%= column.lowerCamelName%>", filter.fullText_like)
			FilterHelper.equal(root, query, cb, predicates, "<%= column.lowerCamelName%>", filter.<%= column.lowerCamelName%>_equal)
		<%
			}
		%><%
			if ((column.ktType === 'Int' || column.ktType === 'Long' || column.ktType === 'Boolean') && !column.type.startsWith('relation')) {
		%>
			FilterHelper.equal(root, query, cb, predicates, "<%= column.lowerCamelName%>", filter.<%= column.lowerCamelName%>_equal)
		<%
			}
		%><%
			if ((column.ktType === 'Int' || column.ktType === 'Long') && !column.type.startsWith('relation')) {
		%>
			FilterHelper.range(root, query, cb, predicates, "<%= column.lowerCamelName%>", filter.<%= column.lowerCamelName%>_from, filter.<%= column.lowerCamelName%>_to)
		<%
			}
		%><%
			if ((column.type === 'Date')) {
		%>
			FilterHelper.between(root, query, cb, predicates,
                "<%= column.lowerCamelName%>", filter.<%= column.lowerCamelName%>_from, filter.<%= column.lowerCamelName%>_to
            )
		<%
			}
		%><%
			if (column.type === 'enum.str') {
		%>
			FilterHelper.inList(root, query, cb, predicates, "<%= column.lowerCamelName%>", filter.<%= column.lowerCamelName%>_list, false, "Enum")
		<%
			}
		%><%
			if (column.type.startsWith('relation.one')) {
				const propName = column.lowerCamelName.substring(0, column.lowerCamelName.length-2);
		%>
			FilterHelper.equal(root, query, cb, predicates, "<%= propName%>", filter.<%= column.lowerCamelName%>_equal)
			FilterHelper.subInList(root, query, cb, predicates, "<%= propName%>", filter.<%= propName%>_list, false, "Int")
		<%
			}
		%><%
			if (column.type.startsWith('relation.many') && column.relation.hints.mtom) {
				const mtomTable = tables.find(e => e.name === column.relation.hints.mtom);
		%>
			FilterHelper.subQueryInList(root, query, cb,
                <%= table.camelName %>::class.java, <%= column.relation.camelName %>::class.java, "<%= table.lowerCamelName %>",
                predicates, "<%= mtomTable.lowerCamelName%>", filter.<%= column.lowerCamelName%>_list, false, "Int"
            )
		<%
			}
		%><%
		})
		%>

			if (filter.fullText_like != null) {
				predicates.add(cb.or(*fullText.toTypedArray()))
			}

/*FOXB-SPEC*/
/*FOXE-SPEC*/

			if (predicates.size < 1) {
				predicates.add(cb.isNotNull(root.get<String>("id")))
			}

			if (filter.isAnd) {
				cb.and(*predicates.toTypedArray())
			} else {
				cb.or(*predicates.toTypedArray())
			}
		}
	)
}
data class <%= table.camelName %>Filter(
	val id_list: String?,
<%
table.columns.forEach((column, idx) => {
	const filterOpts = ((column.options ?? []).find(e => e.startsWith("filter")) ?? "filter:").substring(7).split(";");
%><%
	if (filterOpts.includes('null')) {
%>
	val <%= column.lowerCamelName %>_isNull: Boolean?,
	val <%= column.lowerCamelName %>_isNotNull: Boolean?,
<%
	}
%><%
	if (column.ktType === 'String') {
%>
	val <%= column.lowerCamelName %>_like: <%= column.ktType %>?,
	val <%= column.lowerCamelName %>_equal: <%= column.ktType %>?,
<%
	}
%><%
	if (column.ktType === 'Int' || column.ktType === 'Long' || column.ktType === 'Boolean') {
%>
	val <%= column.lowerCamelName %>_equal: <%= column.ktType %>?,
<%
	}
%><%
	if (column.ktType === 'Int' || column.ktType === 'Long') {
%>
	val <%= column.lowerCamelName %>_from: <%= column.ktType %>?,
	val <%= column.lowerCamelName %>_to: <%= column.ktType %>?,
<%
	}
%><%
	if (column.type === 'Date') {
%>
	val <%= column.lowerCamelName %>_from: String?,
	val <%= column.lowerCamelName %>_to: String?,
<%
	}
%><%
	if (column.type === 'enum.str') {
%>
	val <%= column.lowerCamelName %>_list: String?,
<%
	}
%><%
	if (column.type.startsWith('relation.many') && column.relation.hints.mtom) {
%>
	val <%= column.lowerCamelName %>_list: String?,
<%
	}
%><%
	if (column.type.startsWith('relation.one')) {
		const propName = column.lowerCamelName.substring(0, column.lowerCamelName.length-2);
%>
	val <%= propName %>_list: String?,
<%
	}
%><%
})
%>
	val fullText_like: String?,

/*FOXB-MODEL_INIT*/
/*FOXE-MODEL_INIT*/

	val isAnd : Boolean = false
) {
/*FOXB-MODEL_BLOCK*/
/*FOXE-MODEL_BLOCK*/
}
