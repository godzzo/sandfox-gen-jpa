package <%= options.package %>.service

import <%= options.package %>.domain.User
import <%= options.package %>.map.AuthUserDetails
import <%= options.package %>.map.UserData
import <%= options.package %>.repository.UserRepository
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.data.jpa.domain.Specification
import org.springframework.security.core.userdetails.UserDetails
import org.springframework.security.core.userdetails.UserDetailsService
import org.springframework.security.core.userdetails.UsernameNotFoundException
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import javax.persistence.criteria.Predicate
import javax.servlet.http.HttpSession
/*FOXB-IMPORT*/
/*FOXE-IMPORT*/

@Service("userDetailsServiceImpl")
class UserDetailsServiceImpl : UserDetailsService {
/*FOXB-INIT*/
/*FOXE-INIT*/
<% if (hasRoles) { %>
    @Autowired
    private val session: HttpSession? = null
<% } %>
    @Autowired
    private val userRepository: UserRepository? = null

    @Transactional(readOnly = true)
    @Throws(UsernameNotFoundException::class)
    override fun loadUserByUsername(loginName: String): UserDetails {
        val where: Specification<User>? = Specification.where { root, query, cb ->
            cb.equal(root.get<String>("<%= hasNick? 'nick': 'email' %>"), loginName)
        }

        val user: User = userRepository?.findOne(where)?.get()
            ?: throw UsernameNotFoundException("User not found.")

        log.info("loadUserByUsername() : {}", loginName)
		<% if (hasRoles) { %>
        val roles = user.userRoles.filter {
            it.logicRemove == 0
        }.map {
            it.roleType.toString()
        }

        session?.setAttribute("user.id", user.id)
        session?.setAttribute("user.name", user.name)
        session?.setAttribute("user.roles", roles)

        if (user.logicRemove != 0) {
            throw UsernameNotFoundException("This user removed. ($user.name)")
        }
		<% } %>
/*FOXB-FOUND*/
/*FOXE-FOUND*/
		<% if (!hasRoles) { %>
		val roles = listOf(user.roleType.toString())
		<% } %>
		return AuthUserDetails(UserData(
			user.id,
			user.name!!,
			roles,
			user.passwd!!,
		))
    }

    companion object {
        private val log = LoggerFactory.getLogger(UserDetailsServiceImpl::class.java)
    }
}
