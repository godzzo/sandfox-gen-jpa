package <%= options.package %>.service

import <%= options.package %>.domain.User
import <%= options.package %>.map.AuthUserDetails
import <%= options.package %>.repository.UserRepository
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.security.core.userdetails.UserDetails
import org.springframework.security.core.userdetails.UserDetailsService
import org.springframework.security.core.userdetails.UsernameNotFoundException
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional


@Service("userDetailsServiceImpl")
class UserDetailsServiceImpl : UserDetailsService {
    @Autowired
    private val userRepository: UserRepository? = null

    @Transactional(readOnly = true)
    @Throws(UsernameNotFoundException::class)
    override fun loadUserByUsername(email: String): UserDetails {
        val user: User = userRepository?.findByEmail(email)
                ?: throw UsernameNotFoundException("User not found.")
        log.info("loadUserByUsername() : {}", email)
        return AuthUserDetails(user)
    }

    companion object {
        private val log = LoggerFactory.getLogger(UserDetailsServiceImpl::class.java)
    }
}